from gigachat import GigaChat
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from elements.states_group import ParasiticWords, not_in_state_filter
from elements.inline import back_btn

router = Router()


@router.callback_query(not_in_state_filter, F.data == "parasitic_words")
async def start_parasitic_words(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text="–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å–ª–æ–≤–∞-–ø–∞—Ä–∞–∑–∏—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∏—Ö –≤ —á–∞—Ç:"
    )
    await state.set_state(ParasiticWords.input)


@router.message(ParasiticWords.input)
async def check_parasitic_words(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer(text="–£–ø—Å! –ü–∞–Ω–µ–ª—å –ø–æ–∏—Å–∫–∞ —Å–ª–æ–≤-–ø–∞—Ä–∞–∑–∏—Ç–æ–≤ –Ω–µ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞...")
        return

    bot_message = await message.answer("üí´ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...")
    Giga_Chat = GigaChat(
        credentials=message.bot.config["SETTINGS"]["giga_chat_token"], verify_ssl_certs=False
    )
    with Giga_Chat as giga:
        response = giga.chat(
            f'–°–∫–∞–∂–∏ –º–Ω–µ, —Å–ª–æ–≤–æ {message.text} —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–æ–º-–ø–∞—Ä–∞–∑–∏—Ç–æ–º? –ù—É–∂–µ–Ω –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ "—è–≤–ª—è–µ—Ç—Å—è" –∏–ª–∏ "–Ω–µ —è–≤–ª—è–µ—Ç—Å—è"'
        )

    await bot_message.edit_text(
        text=f"{response.choices[0].message.content}\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —á–∞—Ç:</i>",
        reply_markup=back_btn().as_markup()
    )
